# By @AbirHasan2005
# Telegram Group: http://t.me/linux_repo
 

import base64, codecs
magic = 'ZnJvbSBpdGVydG9vbHMgaW1wb3J0IGN5Y2xlDQppbXBvcnQgcmFuZG9tDQppbXBvcnQgc3lzDQoNCmltcG9ydCBweWdhbWUNCmZyb20gcHlnYW1lLmxvY2FscyBpbXBvcnQgKg0KDQoNCkZQUyA9IDMwDQpTQ1JFRU5XSURUSCAgPSAyODgNClNDUkVFTkhFSUdIVCA9IDUxMg0KUElQRUdBUFNJWkUgID0gMTAwICMgZ2FwIGJldHdlZW4gdXBwZXIgYW5kIGxvd2VyIHBhcnQgb2YgcGlwZQ0KQkFTRVkgICAgICAgID0gU0NSRUVOSEVJR0hUICogMC43OQ0KIyBpbWFnZSwgc291bmQgYW5kIGhpdG1hc2sgIGRpY3RzDQpJTUFHRVMsIFNPVU5EUywgSElUTUFTS1MgPSB7fSwge30sIHt9DQoNCiMgbGlzdCBvZiBhbGwgcG9zc2libGUgcGxheWVycyAodHVwbGUgb2YgMyBwb3NpdGlvbnMgb2YgZmxhcCkNClBMQVlFUlNfTElTVCA9ICgNCiAgICAjIHJlZCBiaXJkDQogICAgKA0KICAgICAgICAnYXNzZXRzL3Nwcml0ZXMvcmVkYmlyZC11cGZsYXAucG5nJywNCiAgICAgICAgJ2Fzc2V0cy9zcHJpdGVzL3JlZGJpcmQtbWlkZmxhcC5wbmcnLA0KICAgICAgICAnYXNzZXRzL3Nwcml0ZXMvcmVkYmlyZC1kb3duZmxhcC5wbmcnLA0KICAgICksDQogICAgIyBibHVlIGJpcmQNCiAgICAoDQogICAgICAgICdhc3NldHMvc3ByaXRlcy9ibHVlYmlyZC11cGZsYXAucG5nJywNCiAgICAgICAgJ2Fzc2V0cy9zcHJpdGVzL2JsdWViaXJkLW1pZGZsYXAucG5nJywNCiAgICAgICAgJ2Fzc2V0cy9zcHJpdGVzL2JsdWViaXJkLWRvd25mbGFwLnBuZycsDQogICAgKSwNCiAgICAjIHllbGxvdyBiaXJkDQogICAgKA0KICAgICAgICAnYXNzZXRzL3Nwcml0ZXMveWVsbG93YmlyZC11cGZsYXAucG5nJywNCiAgICAgICAgJ2Fzc2V0cy9zcHJpdGVzL3llbGxvd2JpcmQtbWlkZmxhcC5wbmcnLA0KICAgICAgICAnYXNzZXRzL3Nwcml0ZXMveWVsbG93YmlyZC1kb3duZmxhcC5wbmcnLA0KICAgICksDQopDQoNCiMgbGlzdCBvZiBiYWNrZ3JvdW5kcw0KQkFDS0dST1VORFNfTElTVCA9ICgNCiAgICAnYXNzZXRzL3Nwcml0ZXMvYmFja2dyb3VuZC1kYXkucG5nJywNCiAgICAnYXNzZXRzL3Nwcml0ZXMvYmFja2dyb3VuZC1uaWdodC5wbmcnLA0KKQ0KDQojIGxpc3Qgb2YgcGlwZXMNClBJUEVTX0xJU1QgPSAoDQogICAgJ2Fzc2V0cy9zcHJpdGVzL3BpcGUtZ3JlZW4ucG5nJywNCiAgICAnYXNzZXRzL3Nwcml0ZXMvcGlwZS1yZWQucG5nJywNCikNCg0KDQp0cnk6DQogICAgeHJhbmdlDQpleGNlcHQgTmFtZUVycm9yOg0KICAgIHhyYW5nZSA9IHJhbmdlDQoNCg0KZGVmIG1haW4oKToNCiAgICBnbG9iYWwgU0NSRUVOLCBGUFNDTE9DSw0KICAgIHB5Z2FtZS5pbml0KCkNCiAgICBGUFNDTE9DSyA9IHB5Z2FtZS50aW1lLkNsb2NrKCkNCiAgICBTQ1JFRU4gPSBweWdhbWUuZGlzcGxheS5zZXRfbW9kZSgoU0NSRUVOV0lEVEgsIFNDUkVFTkhFSUdIVCkpDQogICAgcHlnYW1lLmRpc3BsYXkuc2V0X2NhcHRpb24oJ0ZsYXBweSBCaXJkJykNCg0KICAgICMgbnVtYmVycyBzcHJpdGVzIGZvciBzY29yZSBkaXNwbGF5DQogICAgSU1BR0VTWydudW1iZXJzJ10gPSAoDQogICAgICAgIHB5Z2FtZS5pbWFnZS5sb2FkKCdhc3NldHMvc3ByaXRlcy8wLnBuZycpLmNvbnZlcnRfYWxwaGEoKSwNCiAgICAgICAgcHlnYW1lLmltYWdlLmxvYWQoJ2Fzc2V0cy9zcHJpdGVzLzEucG5nJykuY29udmVydF9hbHBoYSgpLA0KICAgICAgICBweWdhbWUuaW1hZ2UubG9hZCgnYXNzZXRzL3Nwcml0ZXMvMi5wbmcnKS5jb252ZXJ0X2FscGhhKCksDQogICAgICAgIHB5Z2FtZS5pbWFnZS5sb2FkKCdhc3NldHMvc3ByaXRlcy8zLnBuZycpLmNvbnZlcnRfYWxwaGEoKSwNCiAgICAgICAgcHlnYW1lLmltYWdlLmxvYWQoJ2Fzc2V0cy9zcHJpdGVzLzQucG5nJykuY29udmVydF9hbHBoYSgpLA0KICAgICAgICBweWdhbWUuaW1hZ2UubG9hZCgnYXNzZXRzL3Nwcml0ZXMvNS5wbmcnKS5jb252ZXJ0X2FscGhhKCksDQogICAgICAgIHB5Z2FtZS5pbWFnZS5sb2FkKCdhc3NldHMvc3ByaXRlcy82LnBuZycpLmNvbnZlcnRfYWxwaGEoKSwNCiAgICAgICAgcHlnYW1lLmltYWdlLmxvYWQoJ2Fzc2V0cy9zcHJpdGVzLzcucG5nJykuY29udmVydF9hbHBoYSgpLA0KICAgICAgICBweWdhbWUuaW1hZ2UubG9hZCgnYXNzZXRzL3Nwcml0ZXMvOC5wbmcnKS5jb252ZXJ0X2FscGhhKCksDQogICAgICAgIHB5Z2FtZS5pbWFnZS5sb2FkKCdhc3NldHMvc3ByaXRlcy85LnBuZycpLmNvbnZlcnRfYWxwaGEoKQ0KICAgICkNCg0KICAgICMgZ2FtZSBvdmVyIHNwcml0ZQ0KICAgIElNQUdFU1snZ2FtZW92ZXInXSA9IHB5Z2FtZS5pbWFnZS5sb2FkKCdhc3NldHMvc3ByaXRlcy9nYW1lb3Zlci5wbmcnKS5jb252ZXJ0X2FscGhhKCkNCiAgICAjIG1lc3NhZ2Ugc3ByaXRlIGZvciB3ZWxjb21lIHNjcmVlbg0KICAgIElNQUdFU1snbWVzc2FnZSddID0gcHlnYW1lLmltYWdlLmxvYWQoJ2Fzc2V0cy9zcHJpdGVzL21lc3NhZ2UucG5nJykuY29udmVydF9hbHBoYSgpDQogICAgIyBiYXNlIChncm91bmQpIHNwcml0ZQ0KICAgIElNQUdFU1snYmFzZSddID0gcHlnYW1lLmltYWdlLmxvYWQoJ2Fzc2V0cy9zcHJpdGVzL2Jhc2UucG5nJykuY29udmVydF9hbHBoYSgpDQoNCiAgICAjIHNvdW5kcw0KICAgIGlmICd3aW4nIGluIHN5cy5wbGF0Zm9ybToNCiAgICAgICAgc291bmRFeHQgPSAnLndhdicNCiAgICBlbHNlOg0KICAgICAgICBzb3VuZEV4dCA9ICcub2dnJw0KDQogICAgU09VTkRTWydkaWUnXSAgICA9IHB5Z2FtZS5taXhlci5Tb3VuZCgnYXNzZXRzL2F1ZGlvL2RpZScgKyBzb3VuZEV4dCkNCiAgICBTT1VORFNbJ2hpdCddICAgID0gcHlnYW1lLm1peGVyLlNvdW5kKCdhc3NldHMvYXVkaW8vaGl0JyArIHNvdW5kRXh0KQ0KICAgIFNPVU5EU1sncG9pbnQnXSAgPSBweWdhbWUubWl4ZXIuU291bmQoJ2Fzc2V0cy9hdWRpby9wb2ludCcgKyBzb3VuZEV4dCkNCiAgICBTT1VORFNbJ3N3b29zaCddID0gcHlnYW1lLm1peGVyLlNvdW5kKCdhc3NldHMvYXVkaW8vc3dvb3NoJyArIHNvdW5kRXh0KQ0KICAgIFNPVU5EU1snd2luZyddICAgPSBweWdhbWUubWl4ZXIuU291bmQoJ2Fzc2V0cy9hdWRpby93aW5nJyArIHNvdW5kRXh0KQ0KDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgIyBzZWxlY3QgcmFuZG9tIGJhY2tncm91bmQgc3ByaXRlcw0KICAgICAgICByYW5kQmcgPSByYW5kb20ucmFuZGludCgwLCBsZW4oQkFDS0dST1VORFNfTElTVCkgLSAxKQ0KICAgICAgICBJTUFHRVNbJ2JhY2tncm91bmQnXSA9IHB5Z2FtZS5pbWFnZS5sb2FkKEJBQ0tHUk9VTkRTX0xJU1RbcmFuZEJnXSkuY29udmVydCgpDQoNCiAgICAgICAgIyBzZWxlY3QgcmFuZG9tIHBsYXllciBzcHJpdGVzDQogICAgICAgIHJhbmRQbGF5ZXIgPSByYW5kb20ucmFuZGludCgwLCBsZW4oUExBWUVSU19MSVNUKSAtIDEpDQogICAgICAgIElNQUdFU1sncGxheWVyJ10gPSAoDQogICAgICAgICAgICBweWdhbWUuaW1hZ2UubG9hZChQTEFZRVJTX0xJU1RbcmFuZFBsYXllcl1bMF0pLmNvbnZlcnRfYWxwaGEoKSwNCiAgICAgICAgICAgIHB5Z2FtZS5pbWFnZS5sb2FkKFBMQVlFUlNfTElTVFtyYW5kUGxheWVyXVsxXSkuY29udmVydF9hbHBoYSgpLA0KICAgICAgICAgICAgcHlnYW1lLmltYWdlLmxvYWQoUExBWUVSU19MSVNUW3JhbmRQbGF5ZXJdWzJdKS5jb252ZXJ0X2FscGhhKCksDQogICAgICAgICkNCg0KICAgICAgICAjIHNlbGVjdCByYW5kb20gcGlwZSBzcHJpdGVzDQogICAgICAgIHBpcGVpbmRleCA9IHJhbmRvbS5yYW5kaW50KDAsIGxlbihQSVBFU19MSVNUKSAtIDEpDQogICAgICAgIElNQUdFU1sncGlwZSddID0gKA0KICAgICAgICAgICAgcHlnYW1lLnRyYW5zZm9ybS5mbGlwKA0KICAgICAgICAgICAgICAgIHB5Z2FtZS5pbWFnZS5sb2FkKFBJUEVTX0xJU1RbcGlwZWluZGV4XSkuY29udmVydF9hbHBoYSgpLCBGYWxzZSwgVHJ1ZSksDQogICAgICAgICAgICBweWdhbWUuaW1hZ2UubG9hZChQSVBFU19MSVNUW3BpcGVpbmRleF0pLmNvbnZlcnRfYWxwaGEoKSwNCiAgICAgICAgKQ0KDQogICAgICAgICMgaGlzbWFzayBmb3IgcGlwZXMNCiAgICAgICAgSElUTUFTS1NbJ3BpcGUnXSA9ICgNCiAgICAgICAgICAgIGdldEhpdG1hc2soSU1BR0VTWydwaXBlJ11bMF0pLA0KICAgICAgICAgICAgZ2V0SGl0bWFzayhJTUFHRVNbJ3BpcGUnXVsxXSksDQogICAgICAgICkNCg0KICAgICAgICAjIGhpdG1hc2sgZm9yIHBsYXllcg0KICAgICAgICBISVRNQVNLU1sncGxheWVyJ10gPSAoDQogICA'
love = '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'
god = '9yIGNyYXNoIGhlcmUNCiAgICAgICAgY3Jhc2hUZXN0ID0gY2hlY2tDcmFzaCh7J3gnOiBwbGF5ZXJ4LCAneSc6IHBsYXllcnksICdpbmRleCc6IHBsYXllckluZGV4fSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cHBlclBpcGVzLCBsb3dlclBpcGVzKQ0KICAgICAgICBpZiBjcmFzaFRlc3RbMF06DQogICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgICd5JzogcGxheWVyeSwNCiAgICAgICAgICAgICAgICAnZ3JvdW5kQ3Jhc2gnOiBjcmFzaFRlc3RbMV0sDQogICAgICAgICAgICAgICAgJ2Jhc2V4JzogYmFzZXgsDQogICAgICAgICAgICAgICAgJ3VwcGVyUGlwZXMnOiB1cHBlclBpcGVzLA0KICAgICAgICAgICAgICAgICdsb3dlclBpcGVzJzogbG93ZXJQaXBlcywNCiAgICAgICAgICAgICAgICAnc2NvcmUnOiBzY29yZSwNCiAgICAgICAgICAgICAgICAncGxheWVyVmVsWSc6IHBsYXllclZlbFksDQogICAgICAgICAgICAgICAgJ3BsYXllclJvdCc6IHBsYXllclJvdA0KICAgICAgICAgICAgfQ0KDQogICAgICAgICMgY2hlY2sgZm9yIHNjb3JlDQogICAgICAgIHBsYXllck1pZFBvcyA9IHBsYXllcnggKyBJTUFHRVNbJ3BsYXllciddWzBdLmdldF93aWR0aCgpIC8gMg0KICAgICAgICBmb3IgcGlwZSBpbiB1cHBlclBpcGVzOg0KICAgICAgICAgICAgcGlwZU1pZFBvcyA9IHBpcGVbJ3gnXSArIElNQUdFU1sncGlwZSddWzBdLmdldF93aWR0aCgpIC8gMg0KICAgICAgICAgICAgaWYgcGlwZU1pZFBvcyA8PSBwbGF5ZXJNaWRQb3MgPCBwaXBlTWlkUG9zICsgNDoNCiAgICAgICAgICAgICAgICBzY29yZSArPSAxDQogICAgICAgICAgICAgICAgU09VTkRTWydwb2ludCddLnBsYXkoKQ0KDQogICAgICAgICMgcGxheWVySW5kZXggYmFzZXggY2hhbmdlDQogICAgICAgIGlmIChsb29wSXRlciArIDEpICUgMyA9PSAwOg0KICAgICAgICAgICAgcGxheWVySW5kZXggPSBuZXh0KHBsYXllckluZGV4R2VuKQ0KICAgICAgICBsb29wSXRlciA9IChsb29wSXRlciArIDEpICUgMzANCiAgICAgICAgYmFzZXggPSAtKCgtYmFzZXggKyAxMDApICUgYmFzZVNoaWZ0KQ0KDQogICAgICAgICMgcm90YXRlIHRoZSBwbGF5ZXINCiAgICAgICAgaWYgcGxheWVyUm90ID4gLTkwOg0KICAgICAgICAgICAgcGxheWVyUm90IC09IHBsYXllclZlbFJvdA0KDQogICAgICAgICMgcGxheWVyJ3MgbW92ZW1lbnQNCiAgICAgICAgaWYgcGxheWVyVmVsWSA8IHBsYXllck1heFZlbFkgYW5kIG5vdCBwbGF5ZXJGbGFwcGVkOg0KICAgICAgICAgICAgcGxheWVyVmVsWSArPSBwbGF5ZXJBY2NZDQogICAgICAgIGlmIHBsYXllckZsYXBwZWQ6DQogICAgICAgICAgICBwbGF5ZXJGbGFwcGVkID0gRmFsc2UNCg0KICAgICAgICAgICAgIyBtb3JlIHJvdGF0aW9uIHRvIGNvdmVyIHRoZSB0aHJlc2hvbGQgKGNhbGN1bGF0ZWQgaW4gdmlzaWJsZSByb3RhdGlvbikNCiAgICAgICAgICAgIHBsYXllclJvdCA9IDQ1DQoNCiAgICAgICAgcGxheWVySGVpZ2h0ID0gSU1BR0VTWydwbGF5ZXInXVtwbGF5ZXJJbmRleF0uZ2V0X2hlaWdodCgpDQogICAgICAgIHBsYXllcnkgKz0gbWluKHBsYXllclZlbFksIEJBU0VZIC0gcGxheWVyeSAtIHBsYXllckhlaWdodCkNCg0KICAgICAgICAjIG1vdmUgcGlwZXMgdG8gbGVmdA0KICAgICAgICBmb3IgdVBpcGUsIGxQaXBlIGluIHppcCh1cHBlclBpcGVzLCBsb3dlclBpcGVzKToNCiAgICAgICAgICAgIHVQaXBlWyd4J10gKz0gcGlwZVZlbFgNCiAgICAgICAgICAgIGxQaXBlWyd4J10gKz0gcGlwZVZlbFgNCg0KICAgICAgICAjIGFkZCBuZXcgcGlwZSB3aGVuIGZpcnN0IHBpcGUgaXMgYWJvdXQgdG8gdG91Y2ggbGVmdCBvZiBzY3JlZW4NCiAgICAgICAgaWYgbGVuKHVwcGVyUGlwZXMpID4gMCBhbmQgMCA8IHVwcGVyUGlwZXNbMF1bJ3gnXSA8IDU6DQogICAgICAgICAgICBuZXdQaXBlID0gZ2V0UmFuZG9tUGlwZSgpDQogICAgICAgICAgICB1cHBlclBpcGVzLmFwcGVuZChuZXdQaXBlWzBdKQ0KICAgICAgICAgICAgbG93ZXJQaXBlcy5hcHBlbmQobmV3UGlwZVsxXSkNCg0KICAgICAgICAjIHJlbW92ZSBmaXJzdCBwaXBlIGlmIGl0cyBvdXQgb2YgdGhlIHNjcmVlbg0KICAgICAgICBpZiBsZW4odXBwZXJQaXBlcykgPiAwIGFuZCB1cHBlclBpcGVzWzBdWyd4J10gPCAtSU1BR0VTWydwaXBlJ11bMF0uZ2V0X3dpZHRoKCk6DQogICAgICAgICAgICB1cHBlclBpcGVzLnBvcCgwKQ0KICAgICAgICAgICAgbG93ZXJQaXBlcy5wb3AoMCkNCg0KICAgICAgICAjIGRyYXcgc3ByaXRlcw0KICAgICAgICBTQ1JFRU4uYmxpdChJTUFHRVNbJ2JhY2tncm91bmQnXSwgKDAsMCkpDQoNCiAgICAgICAgZm9yIHVQaXBlLCBsUGlwZSBpbiB6aXAodXBwZXJQaXBlcywgbG93ZXJQaXBlcyk6DQogICAgICAgICAgICBTQ1JFRU4uYmxpdChJTUFHRVNbJ3BpcGUnXVswXSwgKHVQaXBlWyd4J10sIHVQaXBlWyd5J10pKQ0KICAgICAgICAgICAgU0NSRUVOLmJsaXQoSU1BR0VTWydwaXBlJ11bMV0sIChsUGlwZVsneCddLCBsUGlwZVsneSddKSkNCg0KICAgICAgICBTQ1JFRU4uYmxpdChJTUFHRVNbJ2Jhc2UnXSwgKGJhc2V4LCBCQVNFWSkpDQogICAgICAgICMgcHJpbnQgc2NvcmUgc28gcGxheWVyIG92ZXJsYXBzIHRoZSBzY29yZQ0KICAgICAgICBzaG93U2NvcmUoc2NvcmUpDQoNCiAgICAgICAgIyBQbGF5ZXIgcm90YXRpb24gaGFzIGEgdGhyZXNob2xkDQogICAgICAgIHZpc2libGVSb3QgPSBwbGF5ZXJSb3RUaHINCiAgICAgICAgaWYgcGxheWVyUm90IDw9IHBsYXllclJvdFRocjoNCiAgICAgICAgICAgIHZpc2libGVSb3QgPSBwbGF5ZXJSb3QNCiAgICAgICAgDQogICAgICAgIHBsYXllclN1cmZhY2UgPSBweWdhbWUudHJhbnNmb3JtLnJvdGF0ZShJTUFHRVNbJ3BsYXllciddW3BsYXllckluZGV4XSwgdmlzaWJsZVJvdCkNCiAgICAgICAgU0NSRUVOLmJsaXQocGxheWVyU3VyZmFjZSwgKHBsYXllcngsIHBsYXllcnkpKQ0KDQogICAgICAgIHB5Z2FtZS5kaXNwbGF5LnVwZGF0ZSgpDQogICAgICAgIEZQU0NMT0NLLnRpY2soRlBTKQ0KDQoNCmRlZiBzaG93R2FtZU92ZXJTY3JlZW4oY3Jhc2hJbmZvKToNCiAgICAiIiJjcmFzaGVzIHRoZSBwbGF5ZXIgZG93biBhbnMgc2hvd3MgZ2FtZW92ZXIgaW1hZ2UiIiINCiAgICBzY29yZSA9IGNyYXNoSW5mb1snc2NvcmUnXQ0KICAgIHBsYXllcnggPSBTQ1JFRU5XSURUSCAqIDAuMg0KICAgIHBsYXllcnkgPSBjcmFzaEluZm9bJ3knXQ0KICAgIHBsYXllckhlaWdodCA9IElNQUdFU1sncGxheWVyJ11bMF0uZ2V0X2hlaWdodCgpDQogICAgcGxheWVyVmVsWSA9IGNyYXNoSW5mb1sncGxheWVyVmVsWSddDQogICAgcGxheWVyQWNjWSA9IDINCiAgICBwbGF5ZXJSb3QgPSBjcmFzaEluZm9bJ3BsYXllclJvdCddDQogICAgcGxheWVyVmVsUm90ID0gNw0KDQogICAgYmFzZXggPSBjcmFzaEluZm9bJ2Jhc2V4J10NCg0KICAgIHVwcGVyUGlwZXMsIGxvd2VyUGlwZXMgPSBjcmFzaEluZm9bJ3VwcGVyUGlwZXMnXSwgY3Jhc2hJbmZvWydsb3dlclBpcGVzJ10NCg0KICAgICMgcGxheSBoaXQgYW5kIGRpZSBzb3VuZHMNCiAgICBTT1VORFNbJ2hpdCddLnBsYXkoKQ0KICAgIGlmIG5vdCBjcmFzaEluZm9bJ2dyb3VuZENyYXNoJ106DQogICAgICAgIFNPVU5EU1snZGllJ10ucGxheSgpDQoNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICBmb3IgZXZlbnQgaW4gcHlnYW1lLmV2ZW50LmdldCgpOg0KICAgICAgICAgICAgaWYgZXZlbnQudHlwZSA9PSBRVUlUIG9yIChldmVudC50eXBlID09IEtFWURPV04gYW5kIGV2ZW50LmtleSA9PSBLX0VTQ0FQRSk6DQogICAgICAgICAgICAgICAgcHlnYW1lLnF1aXQoKQ0KICAgICAgICAgICAgICAgIHN5cy5leGl0KCkNCiAgICAgICAgICAgIGlmIGV2ZW50LnR5cGUgPT0gS0VZRE9XTiBhbmQgKGV2ZW50LmtleSA9PSBLX1NQQUNFIG9yIGV2ZW50LmtleSA9PSBLX1VQKToNCiAgICAgICAgICAgICAgICBpZiBwbGF5ZXJ5ICsgcGxheWVySGVpZ2h0ID49IEJBU0VZIC0gMToNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQoNCiAgICAgICAgIyBwbGF5ZXIgeSBzaGlmdA0KICAgICAgICBpZiBwbGF5ZXJ5ICsgcGxheWVySGVpZ2h0IDwgQkFTRVkgLSAxOg0KICAgICAgICAgICAgcGxheWVyeSArPSBtaW4ocGxheWVyVmVsWSwgQkFTRVkgLSBwbGF5ZXJ5IC0gcGxheWVySGVpZ2h0KQ0KDQogICAgICAgICMgcGxheWVyIHZlbG9jaXR5IGNoYW5nZQ0KICAgICAgICBpZiBwb'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))